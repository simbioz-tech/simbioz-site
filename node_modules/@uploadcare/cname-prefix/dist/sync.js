import { b as S, a as A } from "./isPrefixedCdnBase-DN8rnnom.js";
import { i as z } from "./isPrefixedCdnBase-DN8rnnom.js";
/**
 * [js-sha256]{@link https://github.com/emn178/js-sha256}
 *
 * @license MIT
 * @version 0.11.1
 * @author Chen, Yi-Cyuan [emn178@gmail.com]
 * @copyright Chen, Yi-Cyuan 2014-2025
 */
const t = "0123456789abcdef".split(""), P = [-2147483648, 8388608, 32768, 128], x = [24, 16, 8, 0], p = [
  1116352408,
  1899447441,
  3049323471,
  3921009573,
  961987163,
  1508970993,
  2453635748,
  2870763221,
  3624381080,
  310598401,
  607225278,
  1426881987,
  1925078388,
  2162078206,
  2614888103,
  3248222580,
  3835390401,
  4022224774,
  264347078,
  604807628,
  770255983,
  1249150122,
  1555081692,
  1996064986,
  2554220882,
  2821834349,
  2952996808,
  3210313671,
  3336571891,
  3584528711,
  113926993,
  338241895,
  666307205,
  773529912,
  1294757372,
  1396182291,
  1695183700,
  1986661051,
  2177026350,
  2456956037,
  2730485921,
  2820302411,
  3259730800,
  3345764771,
  3516065817,
  3600352804,
  4094571909,
  275423344,
  430227734,
  506948616,
  659060556,
  883997877,
  958139571,
  1322822218,
  1537002063,
  1747873779,
  1955562222,
  2024104815,
  2227730452,
  2361852424,
  2428436474,
  2756734187,
  3204031479,
  3329325298
];
class g {
  blocks;
  h0;
  h1;
  h2;
  h3;
  h4;
  h5;
  h6;
  h7;
  block;
  start;
  bytes;
  hBytes;
  first;
  lastByteIndex;
  constructor() {
    this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], this.h0 = 1779033703, this.h1 = 3144134277, this.h2 = 1013904242, this.h3 = 2773480762, this.h4 = 1359893119, this.h5 = 2600822924, this.h6 = 528734635, this.h7 = 1541459225, this.block = this.start = this.bytes = this.hBytes = 0, this.first = !0, this.lastByteIndex = 0;
  }
  update(h) {
    let i, c = 0, s;
    const o = h.length, e = this.blocks;
    for (; c < o; ) {
      for (s = this.start; c < o && s < 64; ++c)
        i = h.charCodeAt(c), i < 128 ? e[s >>> 2] |= i << x[s++ & 3] : i < 2048 ? (e[s >>> 2] |= (192 | i >>> 6) << x[s++ & 3], e[s >>> 2] |= (128 | i & 63) << x[s++ & 3]) : i < 55296 || i >= 57344 ? (e[s >>> 2] |= (224 | i >>> 12) << x[s++ & 3], e[s >>> 2] |= (128 | i >>> 6 & 63) << x[s++ & 3], e[s >>> 2] |= (128 | i & 63) << x[s++ & 3]) : (i = 65536 + ((i & 1023) << 10 | h.charCodeAt(++c) & 1023), e[s >>> 2] |= (240 | i >>> 18) << x[s++ & 3], e[s >>> 2] |= (128 | i >>> 12 & 63) << x[s++ & 3], e[s >>> 2] |= (128 | i >>> 6 & 63) << x[s++ & 3], e[s >>> 2] |= (128 | i & 63) << x[s++ & 3]);
      this.lastByteIndex = s, this.bytes += s - this.start, s >= 64 ? (this.block = e[16], this.start = s - 64, this.hash()) : this.start = s;
    }
    return this.bytes > 4294967295 && (this.hBytes += this.bytes / 4294967296 << 0, this.bytes = this.bytes % 4294967296), this;
  }
  finalize() {
    const h = this.blocks, i = this.lastByteIndex;
    h[16] = this.block, h[i >>> 2] |= P[i & 3], this.block = h[16], i >= 56 && (h[0] = this.block, h[16] = h[1] = h[2] = h[3] = h[4] = h[5] = h[6] = h[7] = h[8] = h[9] = h[10] = h[11] = h[12] = h[13] = h[14] = h[15] = 0), h[14] = this.hBytes << 3 | this.bytes >>> 29, h[15] = this.bytes << 3, this.hash();
  }
  hash() {
    let h = this.h0, i = this.h1, c = this.h2, s = this.h3, o = this.h4, e = this.h5, r = this.h6, a = this.h7, l, b, f, y, n, k, B, I, E, H, C;
    const d = this.blocks;
    for (l = 16; l < 64; ++l)
      n = d[l - 15], b = (n >>> 7 | n << 25) ^ (n >>> 18 | n << 14) ^ n >>> 3, n = d[l - 2], f = (n >>> 17 | n << 15) ^ (n >>> 19 | n << 13) ^ n >>> 10, d[l] = d[l - 16] + b + d[l - 7] + f << 0;
    for (C = i & c, l = 0; l < 64; l += 4)
      this.first ? (I = 704751109, n = d[0] - 210244248, a = n - 1521486534 << 0, s = n + 143694565 << 0, this.first = !1) : (b = (h >>> 2 | h << 30) ^ (h >>> 13 | h << 19) ^ (h >>> 22 | h << 10), f = (o >>> 6 | o << 26) ^ (o >>> 11 | o << 21) ^ (o >>> 25 | o << 7), I = h & i, y = I ^ h & c ^ C, B = o & e ^ ~o & r, n = a + f + B + p[l] + d[l], k = b + y, a = s + n << 0, s = n + k << 0), b = (s >>> 2 | s << 30) ^ (s >>> 13 | s << 19) ^ (s >>> 22 | s << 10), f = (a >>> 6 | a << 26) ^ (a >>> 11 | a << 21) ^ (a >>> 25 | a << 7), E = s & h, y = E ^ s & i ^ I, B = a & o ^ ~a & e, n = r + f + B + p[l + 1] + d[l + 1], k = b + y, r = c + n << 0, c = n + k << 0, b = (c >>> 2 | c << 30) ^ (c >>> 13 | c << 19) ^ (c >>> 22 | c << 10), f = (r >>> 6 | r << 26) ^ (r >>> 11 | r << 21) ^ (r >>> 25 | r << 7), H = c & s, y = H ^ c & h ^ E, B = r & a ^ ~r & o, n = e + f + B + p[l + 2] + d[l + 2], k = b + y, e = i + n << 0, i = n + k << 0, b = (i >>> 2 | i << 30) ^ (i >>> 13 | i << 19) ^ (i >>> 22 | i << 10), f = (e >>> 6 | e << 26) ^ (e >>> 11 | e << 21) ^ (e >>> 25 | e << 7), C = i & c, y = C ^ i & s ^ H, B = e & r ^ ~e & a, n = o + f + B + p[l + 3] + d[l + 3], k = b + y, o = h + n << 0, h = n + k << 0;
    this.h0 = this.h0 + h << 0, this.h1 = this.h1 + i << 0, this.h2 = this.h2 + c << 0, this.h3 = this.h3 + s << 0, this.h4 = this.h4 + o << 0, this.h5 = this.h5 + e << 0, this.h6 = this.h6 + r << 0, this.h7 = this.h7 + a << 0;
  }
  hex() {
    this.finalize();
    const h = this.h0, i = this.h1, c = this.h2, s = this.h3, o = this.h4, e = this.h5, r = this.h6, a = this.h7;
    return t[h >>> 28 & 15] + t[h >>> 24 & 15] + t[h >>> 20 & 15] + t[h >>> 16 & 15] + t[h >>> 12 & 15] + t[h >>> 8 & 15] + t[h >>> 4 & 15] + t[h & 15] + t[i >>> 28 & 15] + t[i >>> 24 & 15] + t[i >>> 20 & 15] + t[i >>> 16 & 15] + t[i >>> 12 & 15] + t[i >>> 8 & 15] + t[i >>> 4 & 15] + t[i & 15] + t[c >>> 28 & 15] + t[c >>> 24 & 15] + t[c >>> 20 & 15] + t[c >>> 16 & 15] + t[c >>> 12 & 15] + t[c >>> 8 & 15] + t[c >>> 4 & 15] + t[c & 15] + t[s >>> 28 & 15] + t[s >>> 24 & 15] + t[s >>> 20 & 15] + t[s >>> 16 & 15] + t[s >>> 12 & 15] + t[s >>> 8 & 15] + t[s >>> 4 & 15] + t[s & 15] + t[o >>> 28 & 15] + t[o >>> 24 & 15] + t[o >>> 20 & 15] + t[o >>> 16 & 15] + t[o >>> 12 & 15] + t[o >>> 8 & 15] + t[o >>> 4 & 15] + t[o & 15] + t[e >>> 28 & 15] + t[e >>> 24 & 15] + t[e >>> 20 & 15] + t[e >>> 16 & 15] + t[e >>> 12 & 15] + t[e >>> 8 & 15] + t[e >>> 4 & 15] + t[e & 15] + t[r >>> 28 & 15] + t[r >>> 24 & 15] + t[r >>> 20 & 15] + t[r >>> 16 & 15] + t[r >>> 12 & 15] + t[r >>> 8 & 15] + t[r >>> 4 & 15] + t[r & 15] + t[a >>> 28 & 15] + t[a >>> 24 & 15] + t[a >>> 20 & 15] + t[a >>> 16 & 15] + t[a >>> 12 & 15] + t[a >>> 8 & 15] + t[a >>> 4 & 15] + t[a & 15];
  }
}
function m(u) {
  const h = new g();
  h.update(u);
  const i = h.hex();
  return BigInt(`0x${i}`);
}
const R = 10, T = (u) => {
  const h = m(u);
  return S(h).slice(0, R);
}, _ = (u, h) => {
  const i = T(u);
  return A(i, h);
};
export {
  _ as getPrefixedCdnBaseSync,
  z as isPrefixedCdnBase
};

import os
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å .env —Ñ–∞–π–ª)
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv('VITE_TELEGRAM_TOKEN')
CREATOR_CHAT_ID = '8022779606'

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        chat_id = update.effective_chat.id
        welcome_message = (
            "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∏–Ω—Ç–µ—Ä–µ—Å –∫ Simbioz Tech. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∏–∂–µ, –∏ –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n"
            "–ú—ã —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º—Å—è –Ω–∞:\n"
            "‚Ä¢ –í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n"
            "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –±–∏–∑–Ω–µ—Å–∞\n"
            "‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è—Ö API\n"
            "‚Ä¢ –ú–∞—à–∏–Ω–Ω–æ–º –æ–±—É—á–µ–Ω–∏–∏\n"
            "‚Ä¢ DevOps\n"
            "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–µ –∏ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–∏"
        )
        await context.bot.send_message(chat_id=chat_id, text=welcome_message)

        user = update.effective_user
        user_info = (
            f"üéâ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ:\n"
            f"ID: {chat_id}\n"
            f"Username: {f'@{user.username}' if user.username else '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n"
            f"–ò–º—è: {user.first_name or ''} {user.last_name or ''}"
        )
        await context.bot.send_message(chat_id=CREATOR_CHAT_ID, text=user_info)
        logger.info(f"New user started bot: {chat_id} - {user.username or 'No username'}")
    except Exception as e:
        logger.error(f"Error in start command: {e}")
        await context.bot.send_message(chat_id=chat_id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if update.message.text != '/start':
            chat_id = update.effective_chat.id
            user = update.effective_user
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await context.bot.send_message(
                chat_id=chat_id, 
                text="‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –µ–≥–æ –∏ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–∑–¥–∞—Ç–µ–ª—é
            user_message = (
                f"üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n"
                f"–û—Ç: {f'@{user.username}' if user.username else f'ID {chat_id}'}\n"
                f"–ò–º—è: {user.first_name or ''} {user.last_name or ''}\n"
                f"–°–æ–æ–±—â–µ–Ω–∏–µ:\n{update.message.text}"
            )
            await context.bot.send_message(chat_id=CREATOR_CHAT_ID, text=user_message)
            logger.info(f"Message received from {chat_id} - {user.username or 'No username'}")
    except Exception as e:
        logger.error(f"Error handling message: {e}")
        await context.bot.send_message(chat_id=chat_id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def main():
    if not TOKEN:
        logger.error("–û—à–∏–±–∫–∞: VITE_TELEGRAM_TOKEN –Ω–µ —É–∫–∞–∑–∞–Ω –≤ .env")
        return

    try:
        application = Application.builder().token(TOKEN).build()

        # Register handlers
        application.add_handler(CommandHandler("start", start))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

        logger.info("Telegram bot is starting...")
        print("ü§ñ Telegram bot is running...")
        application.run_polling()
    except Exception as e:
        logger.error(f"Error starting bot: {e}")
        print(f"‚ùå Error starting bot: {e}")

if __name__ == '__main__':
    main()